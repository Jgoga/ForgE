package macbury.forge.editor.windows;

import bibliothek.gui.dock.common.CControl;
import bibliothek.gui.dock.common.CGrid;
import bibliothek.gui.dock.common.CLocation;
import bibliothek.gui.dock.common.DefaultSingleCDockable;
import bibliothek.gui.dock.common.location.CBaseLocation;
import bibliothek.gui.dock.common.theme.ThemeMap;
import com.badlogic.gdx.Gdx;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rsyntaxtextarea.Theme;
import org.fife.ui.rtextarea.RTextScrollPane;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;

public class CodeEditorWindow extends JFrame {
  private final CControl control;
  private final CBaseLocation base;
  private JPanel contentPane;

  public CodeEditorWindow() {
    setContentPane(contentPane);

    control = new CControl(this);
    base = CLocation.base();
    control.setTheme(ThemeMap.KEY_ECLIPSE_THEME);
    setContentPane(control.getContentArea());

    RSyntaxTextArea textArea = new RSyntaxTextArea(20, 60);
    textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
    textArea.setCodeFoldingEnabled(true);
    textArea.setFont(new Font("Ubuntu Mono", textArea.getFont().getStyle(), 14));
    Theme theme = null;
    try {
      theme = Theme.load(getClass().getResourceAsStream("/org/fife/ui/rsyntaxtextarea/themes/dark.xml"));
      theme.apply(textArea);
    } catch (IOException e) {
      e.printStackTrace();
    }


    RTextScrollPane sp = new RTextScrollPane(textArea);
    DefaultSingleCDockable dockable = new DefaultSingleCDockable("code", "sss", sp);
    dockable.setCloseable(true);
    dockable.setExternalizable(false);


    CGrid grid = new CGrid(control);

    grid.add(0, 0, 1, 1, createDockable("scripts", Color.CYAN));
    grid.add(1, 0, 8, 7, createDockable("* main.fjs", Color.CYAN));
    grid.add(1, 0, 8, 7, createDockable("* log.fjs", Color.CYAN));
    grid.add(1, 0, 8, 7, dockable);
    grid.add(0, 8, 9, 2, createDockable("Logs", Color.BLACK));
    control.getContentArea().deploy(grid);

  }

  public DefaultSingleCDockable createDockable(String title, Color color) {
    JPanel panel = new JPanel();
    panel.setBackground(color);
    DefaultSingleCDockable dockable = new DefaultSingleCDockable(title, title, panel);
    dockable.setCloseable(true);
    dockable.setExternalizable(false);
    return dockable;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return contentPane;
  }
}
