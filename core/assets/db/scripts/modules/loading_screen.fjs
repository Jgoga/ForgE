game.provider("$LoadingScreen", function($log, $screens, $graphics, $gl, $thread, $levels, $gdxApp, $assets, $GameplayScreen) {
  var TAG                    = "$LoadingScreen";
  var ROTATION_SPEED         = 80.0;
  var STANDARD_CUBE_ROTATION = 60.0;

  function LoadingScreenAction(teleport) {
    $log.info(TAG, "Initialazing loading screen...");
    this.teleport      = teleport;

    this.camera        = new PerspectiveCamera(67, $graphics.getWidth(), $graphics.getHeight());
    this.boxTransMat   = new Matrix4();
    this.shapeRenderer = new ShapeRenderer();

    this.camera.position.set(0, 8, 0);
    this.camera.lookAt(Vector3.Zero);
    this.indicatorRotation = 0.0;

    $log.info(TAG, "Preparing to load: " + this.teleport.mapId);

    $thread.run(this.loadLevelState.bind(this)).then(this.onLoadLevelStateFinished.bind(this));
  }

  LoadingScreenAction.prototype.loadLevelState = function(result) {
    var levelState = $levels.load(this.teleport.mapId)
    result.resolve(levelState);
  }

  LoadingScreenAction.prototype.onLoadLevelStateFinished = function (justLoadedLevelState) {
    this.levelState = justLoadedLevelState;
    this.level      = new Level(this.levelState, new FileGeometryProvider());
    $log.info(TAG, "Loaded level state: " + this.levelState);
    $thread.run(this.buildGeometry.bind(this)).then(this.onGeometryDone.bind(this));
  }

  LoadingScreenAction.prototype.buildGeometry = function(result) {
    $log.info(TAG, "Building geometry...");
    while(true){
      if (this.level.terrainEngine.rebuildInBackground(10)) {
        break;
      }
    }
    result.resolve();
  }

  LoadingScreenAction.prototype.onGeometryDone = function () {
    $log.info(TAG, "Geometry data done, transforming into meshes!");
    this.level.terrainEngine.buildMeshForAvalibleChunks();
    $log.info(TAG, "Mesh data done, Loading pending assets...");

    $thread.main(this.loadAssets.bind(this));
  }

  LoadingScreenAction.prototype.loadAssets = function () {
    if ($assets.loadPendingInChunks()) {
      $assets.unloadUnusedAssets();
      $log.info(TAG, "Loading done! Showing screen!");
      $screens.set($GameplayScreen.create(this.teleport, this.level));
    } else {
      $thread.main(this.loadAssets.bind(this));
    }
  }

  LoadingScreenAction.prototype.render = function(delta) {
    this.camera.update();
    $gl.glClearColor(0,0,0,0);
    $gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
    this.indicatorRotation += ROTATION_SPEED * delta;
    this.shapeRenderer.begin(ShapeRenderer.ShapeType.Line);
      this.shapeRenderer.setProjectionMatrix(this.camera.combined);
      this.shapeRenderer.identity();
      this.shapeRenderer.translate(6, 0, 4);
      this.shapeRenderer.rotate(0,0,1, STANDARD_CUBE_ROTATION);
      this.shapeRenderer.rotate(0,0,1, this.indicatorRotation);
      this.shapeRenderer.box(-0.5,-0.5,-0.5, 1, 1, 1);
    this.shapeRenderer.end();
  }

  LoadingScreenAction.prototype.dispose = function() {
    this.shapeRenderer.dispose();
    this.level = null;
    this.teleport = null;
    this.levelState = null;
  }

  return {
    get: function(teleport) {
      var loadingScreenInstance      = new AbstractScreen({
        initialize: function() {
          this.action = new LoadingScreenAction(teleport);
        },

        render: function (delta) {
          this.action.render(delta);
        },

        dispose: function() {
          this.action.dispose();
        }
      });
      return loadingScreenInstance;
    }
  };
});
